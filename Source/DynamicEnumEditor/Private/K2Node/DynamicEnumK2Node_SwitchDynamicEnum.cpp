// Fill out your copyright notice in the Description page of Project Settings.


#include "K2Node/DynamicEnumK2Node_SwitchDynamicEnum.h"

#include "BlueprintActionDatabaseRegistrar.h"
#include "BlueprintNodeSpawner.h"
#include "EdGraphSchema_K2.h"

FText UDynamicEnumK2Node_SwitchDynamicEnum::GetTooltipText() const
{
	return NSLOCTEXT("K2Node", "SwitchTag_ToolTip", "Selects an output that matches the input value");
}

FText UDynamicEnumK2Node_SwitchDynamicEnum::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	return NSLOCTEXT("K2Node", "Switch_Tag", "Switch on Dynamic Enum");
}

void UDynamicEnumK2Node_SwitchDynamicEnum::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)
{
	bool bIsDirty = false;
	const FName PropertyName = (PropertyChangedEvent.Property ? PropertyChangedEvent.Property->GetFName() : NAME_None);
	if (PropertyName == GET_MEMBER_NAME_CHECKED(UDynamicEnumK2Node_SwitchDynamicEnum, PinOptions))
	{
		bIsDirty = true;
	}

	if (bIsDirty)
	{
		ReconstructNode();
		GetGraph()->NotifyGraphChanged();
	}
	Super::PostEditChangeProperty(PropertyChangedEvent);
}

void UDynamicEnumK2Node_SwitchDynamicEnum::PostLoad()
{
	Super::PostLoad();
	UEdGraphPin* FunctionPin = FindPin(FunctionName);
	if (FunctionPin&&FunctionClass)
	{
		FunctionPin->DefaultObject = FunctionClass->GetDefaultObject();
	}
}

void UDynamicEnumK2Node_SwitchDynamicEnum::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
	// actions get registered under specific object-keys; the idea is that 
	// actions might have to be updated (or deleted) if their object-key is  
	// mutated (or removed)... here we use the node's class (so if the node 
	// type disappears, then the action should go with it)
	UClass* ActionKey = GetClass();
	// to keep from needlessly instantiating a UBlueprintNodeSpawner, first   
	// check to make sure that the registrar is looking for actions of this type
	// (could be regenerating actions for a specific asset, and therefore the 
	// registrar would only accept actions corresponding to that asset)
	if (ActionRegistrar.IsOpenForRegistration(ActionKey))
	{
		UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
		check(NodeSpawner != nullptr);

		ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
	}
}

void UDynamicEnumK2Node_SwitchDynamicEnum::AddPinToSwitchNode()
{
	const FName PinName = GetUniquePinName();
	PinNames.Add(PinName);

	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, PinName);
	if (PinOptions.Num() < PinNames.Num())
	{ 
		PinOptions.Add(FDynamicEnum());
	}
}

FName UDynamicEnumK2Node_SwitchDynamicEnum::GetUniquePinName()
{
	FName NewPinName;
	int32 Index = 0;
	while (true)
	{
		NewPinName = *FString::Printf(TEXT("Case_%d"), Index++);
		if (!FindPin(NewPinName))
		{
			break;
		}
	}
	return NewPinName;
}

FEdGraphPinType UDynamicEnumK2Node_SwitchDynamicEnum::GetPinType() const
{
	FEdGraphPinType PinType;
	PinType.PinCategory = UEdGraphSchema_K2::PC_Struct;
	PinType.PinSubCategoryObject = FDynamicEnum::StaticStruct();
	return PinType;
}

FEdGraphPinType UDynamicEnumK2Node_SwitchDynamicEnum::GetInnerCaseType() const
{
	FEdGraphPinType PinType;
	PinType.PinCategory = UEdGraphSchema_K2::PC_String;
	return PinType;
}

FName UDynamicEnumK2Node_SwitchDynamicEnum::GetPinNameGivenIndex(int32 Index) const
{
	check(Index);
	return PinNames[Index];
}

void UDynamicEnumK2Node_SwitchDynamicEnum::CreateFunctionPin()
{
	// Set properties on the function pin
	UEdGraphPin* FunctionPin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Object, FunctionClass, FunctionName);
	FunctionPin->bDefaultValueIsReadOnly = true;
	FunctionPin->bNotConnectable = true;
	FunctionPin->bHidden = true;

	const UFunction* Function = FindUField<UFunction>(FunctionClass, FunctionName);
	const bool bIsStaticFunc = Function->HasAllFunctionFlags(FUNC_Static);
	if (Function&&bIsStaticFunc)
	{
		// Wire up the self to the CDO of the class if it's not us
		if (const UBlueprint* BP = GetBlueprint())
		{
			const UClass* FunctionOwnerClass = Function->GetOuterUClass();
			if (!BP->SkeletonGeneratedClass->IsChildOf(FunctionOwnerClass))
			{
				FunctionPin->DefaultObject = FunctionOwnerClass->GetDefaultObject();
			}
		}
	}
}

void UDynamicEnumK2Node_SwitchDynamicEnum::CreateSelectionPin()
{
	const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();
	UEdGraphPin* Pin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Struct, FDynamicEnum::StaticStruct(), TEXT("Selection"));
	K2Schema->SetPinAutogeneratedDefaultValueBasedOnType(Pin);

}

void UDynamicEnumK2Node_SwitchDynamicEnum::CreateCasePins()
{
	while (PinOptions.Num() > PinNames.Num())
	{
		const FName PinName = GetUniquePinName();
		PinNames.Add(PinName);
	}

	if (PinNames.Num() > PinOptions.Num())
	{
		PinNames.SetNum(PinOptions.Num());
	}

	for (int32 Index = 0; Index < PinOptions.Num(); ++Index)
	{
		if (PinOptions[Index].IsValid())
		{
			PinNames[Index] = *PinOptions[Index].GetDisplayNameString();
		}			
		else
		{
			PinNames[Index] = GetUniquePinName();
		}

		CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, PinNames[Index]);
	}
}

void UDynamicEnumK2Node_SwitchDynamicEnum::RemovePin(UEdGraphPin* TargetPin)
{
	checkSlow(TargetPin);

	const FName PinName = TargetPin->PinName;
	// Clean-up pin name array
	const int32 Index = PinNames.IndexOfByKey(PinName);
	if (Index >= 0)
	{
		if (Index < PinOptions.Num())
		{
			PinOptions.RemoveAt(Index);
		}
		PinNames.RemoveAt(Index);
	}
}
